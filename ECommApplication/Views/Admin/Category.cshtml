@model ECommApplication.Models.Category
@{
    /**/

    ViewBag.Title = "Category";
    Html.EnableClientValidation(true);
}
@*<script src="~/Content/AdminLayout/js/jquery.validate.js"></script>*@
@*<script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>*@
@*<script src="~/Content/AdminLayout/js/matrix.form_validation.js"></script>*@
@*<script src="~/Content/AdminLayout/js/jquery.gritter.min.js"></script>*@
@*<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>*@
<link href="~/Content/AdminLayout/css/site.style.css" rel="stylesheet" />
<script type="text/javascript">
    function clearRecord() {
        var isValid = @Html.Raw(Json.Encode(ViewData.ModelState.IsValid)) ;

        if(isValid) {
            $('#CategoryID').val('')
            $('#CategoryName').val('')
            $('#IsActive').val('')
            $('#btnSave').text('Save').addClass('btn-success').removeClass('btn-warning');
        }
        if(parseInt($('#CategoryID').val()) > 0)
            $('#btnSave').text('Update').removeClass('btn-success').addClass('btn-warning')

    }
    function editCategory(e, categoryId) {
        e.preventDefault();
        $.ajax({
            url: "/Bind/BindCategory",
            type: "Get",
            data: { 'CategoryId': categoryId },
            datatype: "json",
            success: function (data) {
                var category = data.category[0];
                $('#CategoryID').val(category.CategoryID)
                $('#CategoryName').val(category.CategoryName)
                $('#IsActive').val(category.IsActive)
                $('#btnSave').text('Update').removeClass('btn-success').addClass('btn-warning')
            }
        });
    }

    function deleteCategory(e, categoryId) {
        e.preventDefault();
        var getConfirmation = confirm("Do you want to remove this record ?")
        if (getConfirmation) {
            $.ajax({
                url: "/Admin/DeleteCategory",
                type: "Get",
                data: { 'CategoryId': categoryId },
                datatype: "json",
                success: function (data) {
                    console.log(data)
                    var category = data.data;
                    $('#CategoryID').val(category.CategoryID)
                    $('#CategoryName').val(category.CategoryName)
                    $('#IsActive').val(category.IsActive)
                    $('#btnSave').text('Update').removeClass('btn-success').addClass('btn-warning')
                },
            });
        }
    }

    $(document).ready(function () {
        $('.field-validation-error').each(function (e) {
            console.log($(this).parent().parent('.control-group'))
            $(this).parent().parent('.control-group').addClass('error')
        })

        var categoryData = "";
        var category = null;
        clearRecord();
        $.ajax({
            url: "/Bind/BindCategory",
            type: "POST",
            datatype: "json",
            success: function (data) { 
                categoryData = data;
                loadDataTable();
            },
        });

        function loadDataTable() {
            var categories = [];
            if (categoryData.category.length > 0) {
                categories = categoryData.category
            }
            else
                categories = []

            $('#tblCategory').DataTable({
                "ordering": true,
                "bJQueryUI": true,
                "sPaginationType": "full_numbers",
                "sDom": '<""l>t<"F"fp>',
                "aaData": categories,
                "searching": true,
                "bDestroy": true,
                //"aoColumnDefs": [
                //    {
                //        "aTargets": [3],
                //        "mData": "",
                //        "mRender": function (data, type, full) {
                //            return `<a class="btn btn-primary" href="#" onclick="javascript:editCategory(event,'` + data.CategoryID + `')">Edit</a>`;
                //        }
                //    }
                //],
                "aoColumns": [
                    { 'mData': 'CategoryID' },
                    { 'mData': 'CategoryName' },
                    { 'mData': 'IsActive' },
                    {
                        "mData": null,
                        "mRender": function (data, type, obj) {
                            return `<a class="btn btn-primary" href="#" onclick="javascript:editCategory(event,'` + obj.CategoryID + `')">Edit</a>`;
                        }
                    },
                ]

            });
        }
        //<a class="btn btn-danger" href="#" onclick="javascript:deleteCategory(event,'` + obj.CategoryID + `')">Delete</a>
    });</script>

<div class="container-fluid">
    <div class="row-fluid">
        <div class="span12">
            <div class="widget-box">
                <div class="widget-title">
                    <span class="icon"> <i class="icon-align-justify"></i> </span>
                    <h5>Category-info</h5>
                </div>
                <div class="widget-content nopadding ">
                    @using (Html.BeginForm("Category", "Admin", FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="control-group width50">
                            <label class="control-label">Category Name :</label>
                            <div class="controls">
                                @Html.HiddenFor(model => model.CategoryID)
                                @Html.TextBoxFor(model => model.CategoryName, new { @maxlength = "100" })
                                @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "help-inline" })
                            </div>
                        </div>
                        <div class="control-group width50">
                            <label class="control-label">Is Active :</label>
                            <div class="controls">
                                @Html.DropDownListFor(model => model.IsActive, ECommApplication.Common.CommonFunctions.SelectListYesNo(), "--Select--")
                                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "help-inline" })
                            </div>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-success" id="btnSave">Save</button>
                            <button type="button" id="btnClear" class="btn btn-success" onclick="clearRecord()">Clear</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="row-fluid">
        <div class="span12">
            <div class="widget-box">
                <div class="widget-title">
                    <span class="icon"><i class="icon-th"></i></span>
                    <h5>Categories :</h5>
                </div>
                <div class="widget-content nopadding">
                    <table class="table table-bordered data-table" id="tblCategory">
                        <thead>
                            <tr>
                                <th>Category ID</th>
                                <th>Category Name</th>
                                <th>Active</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
